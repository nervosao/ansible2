#!/bin/sh
# {{ ansible_managed }}
### BEGIN INIT INFO
# Provides:          minio
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts minio object storage server
# Description:       starts minio using start-stop-daemon
### END INIT INFO

DESC="Minio object storage server"
NAME=minio
DAEMON="{{ minio_bin }}"
DAEMONUSER="{{ minio_user }}"
PIDFILE=/var/run/$NAME.pid
LOGFILE="/var/log/minio.log"
USERBIND="setcap cap_net_bind_service=+ep"
STOP_SCHEDULE="${STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5}"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
# Define log_* function
. /lib/lsb/init-functions

# Read configuration variable file if it is present
[ -r "{{ minio_envfile }}" ] && . {{ minio_envfile }}

{% if minio_gcs_gateway == true %}
DAEMON_ARGS="gateway $MINIO_OPTS $MINIO_VOLUMES"
{% else %}
[ -n "${MINIO_VOLUMES}" ] || log_daemon_msg "Variable MINIO_VOLUMES not set in {{ minio_envfile }}"

DAEMON_ARGS="server $MINIO_OPTS $MINIO_VOLUMES"
{% endif %}

# Set the ulimits
ulimit -n 8192

start() {
  $USERBIND $DAEMON
  {% if minio_gcs_gateway == true %}
  export GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS
  {% endif %}

  export MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY
  export MINIO_SECRET_KEY=$MINIO_SECRET_KEY
  start-stop-daemon --start \
    --make-pidfile \
    --pidfile $PIDFILE \
    --background \
    --chuid $DAEMONUSER \
    --oknodo \
    --no-close \
    --startas $DAEMON -- $DAEMON_ARGS \
    >> $LOGFILE 2>&1
}

stop() {
  start-stop-daemon --stop \
    --quiet \
    --pidfile $PIDFILE \
    --retry=$STOP_SCHEDULE \
    --name $NAME \
    --oknodo
  rm -f $PIDFILE
}

status() {
  if [ -f $PIDFILE ]; then
    if kill -0 $(cat "$PIDFILE"); then
      echo "$NAME is running"
    else
      echo "$NAME process is dead, but pidfile exists"
    fi
  else
    echo "$NAME is not running"
  fi
}

case "$1" in
  start)
    echo "Starting $NAME"
    start
  ;;
  stop)
    echo "Stopping $NAME"
    stop
  ;;
  restart)
    echo "Restarting $NAME"
    stop
    start
  ;;
  status)
    status
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 2
  ;;
esac

exit 0
